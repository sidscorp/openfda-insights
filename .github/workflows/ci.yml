name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Lint and format check
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt
          
      - name: Check dependencies for known vulnerabilities
        run: |
          safety check --json --output safety-report.json
          safety check

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "FDA_API_KEY=test_key" >> .env
          echo "AI_API_KEY=test_key" >> .env
          
      - name: Run tests with coverage
        run: |
          pytest --cov=enhanced_fda_explorer --cov-report=xml --cov-report=html --cov-report=term-missing
          
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.9'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Task reference validation
  task-validation:
    name: Task Reference Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
          
      - name: Validate task references in commits
        run: |
          # Get commit messages in this PR
          git log --format="%s" origin/main..HEAD | while read commit_msg; do
            echo "Validating: $commit_msg"
            echo "$commit_msg" > temp_commit_msg.txt
            python scripts/validate_task_reference.py temp_commit_msg.txt
          done

  # Documentation build test
  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocstrings
          
      - name: Build documentation
        run: |
          # Build documentation (non-strict mode until all docs are complete)
          if [ -f mkdocs.yml ]; then
            mkdocs build
          else
            echo "No mkdocs.yml found, skipping docs build"
          fi
          
      - name: Test documentation links
        run: |
          # Check for broken internal links
          find docs/ -name "*.md" -exec grep -l "http" {} \; | head -5

  # Build and test package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: |
          python -m build
          
      - name: Check package
        run: |
          twine check dist/*
          
      - name: Test installation
        run: |
          pip install dist/*.whl
          fda-explorer --help

  # Integration tests (optional, for when we have live API testing)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: false  # Disabled for now, enable when we have proper integration tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run integration tests
        env:
          FDA_API_KEY: ${{ secrets.FDA_API_KEY }}
          AI_API_KEY: ${{ secrets.AI_API_KEY }}
        run: |
          pytest tests/integration/ -v --tb=short